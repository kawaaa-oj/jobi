//=============================================================================
//
// エフェクトの処理 [effect.cpp]
// Author : 川村優斗
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "effect.h"
#include"time.h"
#include"game.h"

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CEffect::CEffect(int nPriority) : CScene2D(nPriority)
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CEffect::~CEffect()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CEffect::Init(void)
{
	CScene2D::Init();

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CEffect::Uninit(void)
{
	CScene2D::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CEffect::Update(void)
{
	// 現在の時間を取得
	CTime *pTime = CGame::GetTime();
	int nTime = pTime->GetTime();

	if (nTime != 0)
	{
		// 半径を減らし
		m_fRad -= 1.0f;

		// 寿命も減らす
		m_nLife--;

		// 半径分の大きさを設定し
		SetSize(D3DXVECTOR2(m_fRad, m_fRad));

		// 色を設定する
		m_col.a -= m_fAlpha;
		SetColor(m_col);

		// 位置を設定
		SetPosition(m_pos);

		CScene2D::Update();

		if (m_col.a <= 0.0f)
		{
			m_col.a = 1.0f;
		}

		// 寿命がなくなるか、半径が小さくなると消える
		if (m_nLife <= 0 || m_fRad <= 10)
		{
			Uninit();
		}
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void CEffect::Draw(void)
{
	CManager::GetRenderer()->AddSynthesis(true);
	CScene2D::Draw();
	CManager::GetRenderer()->AddSynthesis(false);
}

//=============================================================================
// 生成処理
//=============================================================================
CEffect * CEffect::Create(D3DXVECTOR3 pos, D3DXCOLOR col, float fRad, int nLife, float fAlpha, CTexture::TEXTURE_TYPE type)
{
	// エフェクトのインスタンス生成
	CEffect *pEffect = new CEffect;

	// エフェクトの準備
	if (pEffect != NULL)
	{
		pEffect->Init();
		pEffect->m_pos = pos;
		pEffect->m_fRad = fRad;
		pEffect->m_col = col;
		pEffect->m_nLife = nLife;
		pEffect->m_fAlpha = fAlpha;
		pEffect->BindTexture(CManager::GetTexture()->SetTextureType(type));
	}
	return pEffect;
}