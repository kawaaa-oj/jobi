//=============================================================================
//
// ライフの処理 [life.cpp]
// Author : 川村優斗
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include"life.h"
#include"fade.h"
#include"padx.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CLife::CLife(int nPriority) : CScene2D(nPriority)
{
	m_nLife = 8;
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_fade = false;
}

//=============================================================================
// デストラクタ
//=============================================================================
CLife::~CLife()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CLife::Init(void)
{
	for (int nCntLife = 0; nCntLife < m_nLife; nCntLife++)
	{
		m_apPolygon[nCntLife] = CUI::Create(D3DXVECTOR3(m_pos.x + m_size.x + 40 * nCntLife, m_pos.y, 0.0f), D3DXVECTOR2(m_size.x, m_size.y), CTexture::TEXTURETYPE_LIFE);
	}

	CScene2D::Init();
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CLife::Uninit(void)
{
	CScene2D::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CLife::Update(void)
{
	if (m_nLife == 0)
	{
		CFade *pFade = CManager::GetFade();
		if (m_fade == false)
		{
			pFade->SetFade(CManager::MODE_GAMEOVER);
			m_fade = true;
		}
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void CLife::Draw(void)
{
	for (int nCntLife = 0; nCntLife < m_nLife; nCntLife++)
	{
		m_apPolygon[nCntLife]->Draw();
	}
}

//=============================================================================
// ライフの設定
//=============================================================================
void CLife::SetLife(int nLife)
{
	m_nLife = nLife;
}

//=============================================================================
// ライフの加算
//=============================================================================
void CLife::AddLife(int nValue)
{
	// ライフを増やす（減らす）
	m_nLife += nValue;

	// 増えすぎると重くなるのでいらない分を消す
	for (int nCntLife = 0; nCntLife < m_nLife - nValue; nCntLife++)
	{
		m_apPolygon[nCntLife]->Uninit();
	}

	// ハートマークの増減
	for (int nCntLife = 0; nCntLife < m_nLife; nCntLife++)
	{
		// ライフがMAX以上の場合はcreateしないでそっとに戻す
		if (nCntLife <= MAX_LIFE)
		{
			m_apPolygon[nCntLife] = CUI::Create(D3DXVECTOR3(m_pos.x + m_size.x + 40 * nCntLife, m_pos.y, 0.0f), D3DXVECTOR2(m_size.x, m_size.y), CTexture::TEXTURETYPE_LIFE);
		}
		else
		{
			m_nLife = MAX_LIFE;
		}
	}
}

//=============================================================================
// ライフの取得
//=============================================================================
int CLife::GetLife(void)
{
	return m_nLife;
}

//=============================================================================
// 描画処理
//=============================================================================
CLife * CLife::Create(D3DXVECTOR3 pos, D3DXVECTOR2 size, int life)
{
	// ライフのインスタンス生成
	CLife *pLife = new CLife;

	// ライフの準備
	if (pLife != NULL)
	{
		pLife->m_nLife = life;
		pLife->m_pos = pos;
		pLife->m_size = size;
		pLife->Init();
	}

	return pLife;
}